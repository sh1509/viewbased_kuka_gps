# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps_agent_pkg/TrialCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gps_agent_pkg.msg

class TrialCommand(genpy.Message):
  _md5sum = "04466b7105be234f831db431c410ea7a"
  _type = "gps_agent_pkg/TrialCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message is published to the C++ controller to start
# a trial
int32 id  # ID must be echoed back in SampleResult
ControllerParams controller

# Trial information
int32 T  # Trajectory length
float64 frequency  # Controller frequency
int8[] state_datatypes  # Which data types to include in state
int8[] obs_datatypes # Which data types to include in observation
float64[] ee_points # A 3*n_points array containing offsets
float64[] ee_points_tgt # A 3*n_points array containing the desired ee_points for this trial

================================================================================
MSG: gps_agent_pkg/ControllerParams
int8 controller_to_execute  # controller enum, defined in gps_pb2

CaffeParams caffe
LinGaussParams lingauss
TfParams tf

================================================================================
MSG: gps_agent_pkg/CaffeParams
string net_param # Serialized net parameter with weights (equivalent of prototxt file)
float32[] bias
float32[] scale
float32[] noise
int32 dim_bias
uint32 dU

================================================================================
MSG: gps_agent_pkg/LinGaussParams
# Time-varying Linear Gaussian controller
uint32 dX
uint32 dU
float64[] K_t  # Should be T x Du x Dx
float64[] k_t  # Should by T x Du

================================================================================
MSG: gps_agent_pkg/TfParams
# Tf Params. just need to track dU.
uint32 dU

"""
  __slots__ = ['id','controller','T','frequency','state_datatypes','obs_datatypes','ee_points','ee_points_tgt']
  _slot_types = ['int32','gps_agent_pkg/ControllerParams','int32','float64','int8[]','int8[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,controller,T,frequency,state_datatypes,obs_datatypes,ee_points,ee_points_tgt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrialCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.controller is None:
        self.controller = gps_agent_pkg.msg.ControllerParams()
      if self.T is None:
        self.T = 0
      if self.frequency is None:
        self.frequency = 0.
      if self.state_datatypes is None:
        self.state_datatypes = []
      if self.obs_datatypes is None:
        self.obs_datatypes = []
      if self.ee_points is None:
        self.ee_points = []
      if self.ee_points_tgt is None:
        self.ee_points_tgt = []
    else:
      self.id = 0
      self.controller = gps_agent_pkg.msg.ControllerParams()
      self.T = 0
      self.frequency = 0.
      self.state_datatypes = []
      self.obs_datatypes = []
      self.ee_points = []
      self.ee_points_tgt = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_ib().pack(_x.id, _x.controller.controller_to_execute))
      _x = self.controller.caffe.net_param
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.controller.caffe.bias)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.controller.caffe.bias))
      length = len(self.controller.caffe.scale)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.controller.caffe.scale))
      length = len(self.controller.caffe.noise)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.controller.caffe.noise))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.controller.caffe.dim_bias, _x.controller.caffe.dU, _x.controller.lingauss.dX, _x.controller.lingauss.dU))
      length = len(self.controller.lingauss.K_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.controller.lingauss.K_t))
      length = len(self.controller.lingauss.k_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.controller.lingauss.k_t))
      _x = self
      buff.write(_get_struct_Iid().pack(_x.controller.tf.dU, _x.T, _x.frequency))
      length = len(self.state_datatypes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.state_datatypes))
      length = len(self.obs_datatypes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.obs_datatypes))
      length = len(self.ee_points)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ee_points))
      length = len(self.ee_points_tgt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ee_points_tgt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.controller is None:
        self.controller = gps_agent_pkg.msg.ControllerParams()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.id, _x.controller.controller_to_execute,) = _get_struct_ib().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controller.caffe.net_param = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.controller.caffe.net_param = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.controller.caffe.bias = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.controller.caffe.scale = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.controller.caffe.noise = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.controller.caffe.dim_bias, _x.controller.caffe.dU, _x.controller.lingauss.dX, _x.controller.lingauss.dU,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.controller.lingauss.K_t = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.controller.lingauss.k_t = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.controller.tf.dU, _x.T, _x.frequency,) = _get_struct_Iid().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state_datatypes = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.obs_datatypes = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ee_points = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ee_points_tgt = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_ib().pack(_x.id, _x.controller.controller_to_execute))
      _x = self.controller.caffe.net_param
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.controller.caffe.bias)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.controller.caffe.bias.tostring())
      length = len(self.controller.caffe.scale)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.controller.caffe.scale.tostring())
      length = len(self.controller.caffe.noise)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.controller.caffe.noise.tostring())
      _x = self
      buff.write(_get_struct_i3I().pack(_x.controller.caffe.dim_bias, _x.controller.caffe.dU, _x.controller.lingauss.dX, _x.controller.lingauss.dU))
      length = len(self.controller.lingauss.K_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.controller.lingauss.K_t.tostring())
      length = len(self.controller.lingauss.k_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.controller.lingauss.k_t.tostring())
      _x = self
      buff.write(_get_struct_Iid().pack(_x.controller.tf.dU, _x.T, _x.frequency))
      length = len(self.state_datatypes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.state_datatypes.tostring())
      length = len(self.obs_datatypes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.obs_datatypes.tostring())
      length = len(self.ee_points)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ee_points.tostring())
      length = len(self.ee_points_tgt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ee_points_tgt.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.controller is None:
        self.controller = gps_agent_pkg.msg.ControllerParams()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.id, _x.controller.controller_to_execute,) = _get_struct_ib().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controller.caffe.net_param = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.controller.caffe.net_param = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.controller.caffe.bias = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.controller.caffe.scale = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.controller.caffe.noise = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 16
      (_x.controller.caffe.dim_bias, _x.controller.caffe.dU, _x.controller.lingauss.dX, _x.controller.lingauss.dU,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.controller.lingauss.K_t = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.controller.lingauss.k_t = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.controller.tf.dU, _x.T, _x.frequency,) = _get_struct_Iid().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state_datatypes = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.obs_datatypes = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ee_points = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ee_points_tgt = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Iid = None
def _get_struct_Iid():
    global _struct_Iid
    if _struct_Iid is None:
        _struct_Iid = struct.Struct("<Iid")
    return _struct_Iid
_struct_i3I = None
def _get_struct_i3I():
    global _struct_i3I
    if _struct_i3I is None:
        _struct_i3I = struct.Struct("<i3I")
    return _struct_i3I
_struct_ib = None
def _get_struct_ib():
    global _struct_ib
    if _struct_ib is None:
        _struct_ib = struct.Struct("<ib")
    return _struct_ib
