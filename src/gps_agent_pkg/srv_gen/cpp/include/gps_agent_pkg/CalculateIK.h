/* Auto-generated by genmsg_cpp for file /home/suneet/gps/src/gps_agent_pkg/srv/CalculateIK.srv */
#ifndef GPS_AGENT_PKG_SERVICE_CALCULATEIK_H
#define GPS_AGENT_PKG_SERVICE_CALCULATEIK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"


#include "trajectory_msgs/JointTrajectoryPoint.h"

namespace gps_agent_pkg
{
template <class ContainerAllocator>
struct CalculateIKRequest_ {
  typedef CalculateIKRequest_<ContainerAllocator> Type;

  CalculateIKRequest_()
  : poses()
  {
  }

  CalculateIKRequest_(const ContainerAllocator& _alloc)
  : poses(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _poses_type;
  std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  poses;


  typedef boost::shared_ptr< ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct CalculateIKRequest
typedef  ::gps_agent_pkg::CalculateIKRequest_<std::allocator<void> > CalculateIKRequest;

typedef boost::shared_ptr< ::gps_agent_pkg::CalculateIKRequest> CalculateIKRequestPtr;
typedef boost::shared_ptr< ::gps_agent_pkg::CalculateIKRequest const> CalculateIKRequestConstPtr;



template <class ContainerAllocator>
struct CalculateIKResponse_ {
  typedef CalculateIKResponse_<ContainerAllocator> Type;

  CalculateIKResponse_()
  : points()
  {
  }

  CalculateIKResponse_(const ContainerAllocator& _alloc)
  : points(_alloc)
  {
  }

  typedef std::vector< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::other >  points;


  typedef boost::shared_ptr< ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct CalculateIKResponse
typedef  ::gps_agent_pkg::CalculateIKResponse_<std::allocator<void> > CalculateIKResponse;

typedef boost::shared_ptr< ::gps_agent_pkg::CalculateIKResponse> CalculateIKResponsePtr;
typedef boost::shared_ptr< ::gps_agent_pkg::CalculateIKResponse const> CalculateIKResponseConstPtr;


struct CalculateIK
{

typedef CalculateIKRequest Request;
typedef CalculateIKResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CalculateIK
} // namespace gps_agent_pkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "db8ce58a1deaf0d1f2e7fdd257963e81";
  }

  static const char* value(const  ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdb8ce58a1deaf0d1ULL;
  static const uint64_t static_value2 = 0xf2e7fdd257963e81ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_agent_pkg/CalculateIKRequest";
  }

  static const char* value(const  ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose[] poses\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cbcffe0108b8e28a6a17e35f91e89d9f";
  }

  static const char* value(const  ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcbcffe0108b8e28aULL;
  static const uint64_t static_value2 = 0x6a17e35f91e89d9fULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_agent_pkg/CalculateIKResponse";
  }

  static const char* value(const  ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_msgs/JointTrajectoryPoint[] points\n\
\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
# Each trajectory point specifies either positions[, velocities[, accelerations]]\n\
# or positions[, effort] for the trajectory to be executed.\n\
# All specified values are in the same order as the joint names in JointTrajectory.msg\n\
\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] effort\n\
duration time_from_start\n\
\n\
";
  }

  static const char* value(const  ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.poses);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct CalculateIKRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.points);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct CalculateIKResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<gps_agent_pkg::CalculateIK> {
  static const char* value() 
  {
    return "e2841ca7335735bd34d77773a974ca4b";
  }

  static const char* value(const gps_agent_pkg::CalculateIK&) { return value(); } 
};

template<>
struct DataType<gps_agent_pkg::CalculateIK> {
  static const char* value() 
  {
    return "gps_agent_pkg/CalculateIK";
  }

  static const char* value(const gps_agent_pkg::CalculateIK&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2841ca7335735bd34d77773a974ca4b";
  }

  static const char* value(const gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_agent_pkg/CalculateIK";
  }

  static const char* value(const gps_agent_pkg::CalculateIKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2841ca7335735bd34d77773a974ca4b";
  }

  static const char* value(const gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_agent_pkg/CalculateIK";
  }

  static const char* value(const gps_agent_pkg::CalculateIKResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // GPS_AGENT_PKG_SERVICE_CALCULATEIK_H

